# -*- coding: utf-8 -*-
"""1.1.3 A Spring-Mass Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14lztBdaemlAj22ua1Ruw4dlSD2YvieA8
"""

import numpy as np
import sympy as sp
import math

from sympy import symbols
x = symbols('x')

"""Textbook: http://faculty.sfasu.edu/judsontw/ode/html-snapshot/firstlook01.html

<h1>Writeup 1.1.3 A Spring-Mass Model</h1>
<img src="http://faculty.sfasu.edu/judsontw/ode/html-snapshot/images/firstlook01-spring-mass.svg">

***Hooke's Law***

One differential equation that can model the oscillating mass on the spring in the figure above is as follows:
$F(x)=F(0)+F'(0)x+ \frac{1}{2} F''(0)x^2+...\\=-kx+\frac{1}{2}(0)x^2+...$ 

(where $F'(0)=-k$ and $F(0)=0$)
(Hooke's Law)
$F=-kx$

(Hooke's Law)
$F=-kx$

Test Hooke's law with Newton's second law of motion:
$\\F = ma = m \frac{d^2x}{dt^2}=mx''\\mx''=-kx$

Setting the two force equations equal to each other makes second-order differential equation (second derivative) [Example of harmonic oscillator]

<h2> Example 1.1.5

Spring mass where m=1 and k=1
(initial velocity of spring = 1 u/s
 initial pos = equilibrium)
 
 $x''+x=0\\x(0)=0\\x'(0)=1$
"""

a = math.cos(x)
for i in range(4):
  a = diff(a)
  print(a)

"""Because $x''(t)=-x(t)$ with cosine and sine functions:
 
 $x(t)=A cos(t)+B sin(t)$
 $x'(t)=-Asin(t)+Bcos(t)$

 A = 0 and B = 1 according to the initial parameters, so

$x(t) = sin(t)$
"""

import matplotlib.pyplot as plt
t = symbols('t')

x = np.linspace(0,30,num=100)
xt = np.sin(x)
plt.plot(x, xt)

"""**Damping force**
Resistant damping force on mass:

$F = -bx'$


Implementing into spring mass eq.

$mx'' = -bx' - kx$

*makes simple damped harmonic oscillator*

<h2> Example 1.1.7

Spring mass eq. with m=1, b=3 and k=2: $x''+3x'+2x=0$
Solution is of the form $x(t) = e^{rt}$ so,

$x^n+3x'+2x=r^2e^{rt}+2e^{rt}$

$=e^{rt}(r^2+3r+2)\\=e^{rt}(r+2)(r+1)\\=0$

But $e^{rt}$ is never 0 so r=-2 or -1 if $e^{rt}$ is the solution

Since $x'(t)=-Ae^{-t}-2Be^{-2t}$ we get:

A+B=0

-A-2B=1

A=1 and B=-1 so the spring mass can be modeled with the eq $x(t)=e^{-t}-e^{-2t}$
Over-damped function:
"""

x = np.linspace(0,10,num=100)
xt= np.exp(-x) - np.exp(-2*x)
plt.plot(x, xt)

